"""
A class and module to support an entire course.  A
course is connected to both a Canvas course.

This module loads data from the Canvas course using
its API (see `canvas.py`).

Using the configuration module (see `config.py`), users
are separated according to instructors (non-graders),
graders, and students.

The Course class itself maintains these groups both
as lists of NUIDs (strings) and maps of NUID => Person (object).

When used as an executable file, all course data is
loaded and printed to the standard output.  Otherwise,
a global object (course) is made available.

In addition to the course data, two functions provide
functionality to randomly create a grading assignment
(see `get_ssignment()` and `assignment_to_string()`).
"""

import copy
import math
import random

from config import config
from canvas import roster
from canvas import groups
from group import Group


class Course:
    """
    Represents a course
    """
    # all persons will be by NUID
    instructor_nuids = []
    instructors = {}

    grader_nuids = []
    graders = {}

    students = {}
    groups = []

    def __init__(self, instructor_nuids=[], grader_nuids=[]):
        self.instructor_nuids = instructor_nuids
        self.grader_nuids = grader_nuids
        # 1. load full roster from canvas
        # {NUID => Person}
        self.roster = roster

        # 3. filter into the appropriate group
        #   This is done manually as the "role" is not available from canvas
        #   using the canvas API and we want more fine-grained control anyway
        #   - Otherwise, they are either a student XOR instructor/grader
        #     - instructors can be graders
        for nuid, p in self.roster.items():
            if nuid in instructor_nuids or nuid in grader_nuids:
                if nuid in instructor_nuids:
                    self.instructors[nuid] = p
                if nuid in grader_nuids:
                    self.graders[nuid] = p
            else:
                self.students[nuid] = p
        # update groups to exclude instructors and graders [Group]
        self.groups = []
        # for each group in canvas.groups:
        for g in groups:
            # if the group leader (first listed) is a student, then add them
            if len(g.members) == 0:
                print(f'Warning: Group {g.canvas_group_name} ({g.canvas_group_id}) has no members')
            elif g.members[0].nuid in self.students:
                self.groups.append(g)

    def __str__(self):
        r = "Instructors (%d): \n" % (len(self.instructors))
        for nuid, p in self.instructors.items():
            r += str(p) + "\n"
        r += "Graders (%d): \n" % (len(self.graders))
        for nuid, p in self.graders.items():
            r += str(p) + "\n"
        r += "Students (%d): \n" % (len(self.students))
        for nuid, p in self.students.items():
            r += str(p) + "\n"
        r += "Groups: \n"
        for g in self.groups:
            r += str(g)
        r += "CSV Data:\n"
        r += "nuid,name,canvas_id,canvas_email,canvas_login\n"
        for nuid, p in self.students.items():
            r += p.to_csv()
        r += "Emails:\n"
        for nuid, p in self.students.items():
            r += str(p.canvas_email) + "\n"
        return r

    def get_grading_assignment(self):
        """
        Returns a randomized mapping of graders (Person objects)
        to a list of students (Group objects) they are assigned
        to grade.

        Assignments are made in a round-robin manner so that the
        same grader(s) are not always assigned more (or fewer) to
        grade.
        """
        grader_nuids = list(self.graders.keys())
        groups = copy.deepcopy(self.groups)
        random.shuffle(grader_nuids)
        random.shuffle(groups)
        assignment = {}
        # initialize lists
        for grader_nuid in grader_nuids:
            assignment[self.graders[grader_nuid]] = []
        i = 0
        n = len(grader_nuids)
        for group in groups:
            g = self.graders[grader_nuids[i]]
            assignment[g].append(group)
            i = (i + 1) % n
        return assignment

    def assignment_to_string(self, assignment):
        """
        Given an assignment (a mapping of Person objects to a
        list of Person objects) as generated by getAssignment(),
        this function will create a human-readable string of the
        grading assignments.  For convenience, the printed string
        is in order of name for both graders and students.
        """
        r = "Assigned Grading\n"
        r += "================\n"
        min = math.floor(len(self.groups) / len(self.graders))
        max = math.ceil(len(self.groups) / len(self.graders))
        r += "Each grader will grade %d - %d groups\n" % (min, max)
        # dump graders to list of Person objects
        graders = list(assignment.keys())
        graders.sort(key=lambda x: x.name)
        for grader in graders:
            groups = assignment[grader]
            groups.sort(key=lambda x: x.members[0].name)
            n = len(groups)
            r += "%s (%d assigned)\n" % (grader.name, n)
            for g in groups:
                r += str(g)
        return r

    def assignment_to_csv(self, assignment):
        """
        Given an assignment (a mapping of `Person` objects to a
        list of `Person` objects) as generated by `get_assignment()``,
        this function will create a CSV-formatted string for use in
        a shared Excel sheet.
        """
        r = ""
        graders = list(assignment.keys())
        graders.sort(key=lambda x: x.name)
        for grader in graders:
            groups = assignment[grader]
            groups.sort(key=lambda x: x.members[0].name)
            name_tokens = grader.name.split(",")
            grader_last_name = name_tokens[0].strip()
            grader_first_name = name_tokens[1].strip()
            for g in groups:
                name_tokens = g.members[0].name.split(",")
                student_last_name = name_tokens[0].strip()
                student_first_name = name_tokens[1].strip()
                r += "%s,%s,%s,%s,%s,%s,%s\n" % (
                    grader.nuid,
                    grader_last_name,
                    grader_first_name,
                    g.members[0].nuid,
                    student_last_name,
                    student_first_name,
                    g.members[0].canvas_email,
                )
        return r


course = Course(instructor_nuids=config.instructor_nuids, grader_nuids=config.grader_nuids)
"""
The course object for this module initialized with with
the course data defined in config.py
"""


if __name__ == "__main__":
    print(course)
